@page "/clients"
@implements IDisposable
@using PodLoad.Server.Models
@using PodLoad.Server.Services

<PageTitle>Clients</PageTitle>

<MudPaper Elevation="10" Style="margin-bottom: 5px;margin-top: 5px">
    <MudToolBar>
        <MudText>@( _selectedClientsCount > 0 ? $"{_selectedClientsCount} clients selected" : string.Empty)</MudText>
        <MudSpacer/>
        <MudStack Reverse="true" Row="true">
            <MudButton Color="Color.Primary" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Check" 
                       Disabled="@(_selectedClientsCount == 0)" OnClick="@OnApplyButtonClicked">Set</MudButton>
            <MudTextField T="uint" Label="Memory (Mb)" MaxLength="10" @bind-Value="_desiredMemory"></MudTextField>
            <MudTextField T="uint" Label="Delay (ms)" @bind-Value="_desiredDelay"></MudTextField>
        </MudStack>
    </MudToolBar>
</MudPaper>

<MudTable Elevation="10" T="ClientInfo" Items="@_elements" SelectedItems="@_selectedItems"
          MultiSelection="true"
          SelectionChangeable="true"
          Hover="true"
          SelectOnRowClick="true"
          SelectedItemsChanged="OnSelectedItemsChanged">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Host Name</MudTh>
        <MudTh>Ip Address</MudTh>
        <MudTh>Desired Delay</MudTh>
        <MudTh>Desired Memory</MudTh>
        <MudTh>Actual Delay</MudTh>
        <MudTh>Actual Memory</MudTh>
        <MudTh>Last Seen</MudTh>
        <MudTh>State</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="HostName">@context.HostName</MudTd>
        <MudTd DataLabel="IpAddress">@context.IpAddress</MudTd>
        <MudTd DataLabel="DesiredDelay">
        @if (context.DesiredDelay != context.Delay)
        {
            <MudBadge Color="Color.Warning" Dot="true" Origin="Origin.TopRight">@context.DesiredDelay.ToString("g")</MudBadge>
        }
        else
        {
            @context.DesiredDelay.ToString("g")   
        }
        </MudTd>
        <MudTd DataLabel="DesiredMemory">
            @if (context.DesiredMemoryAllocated != context.MemoryAllocated)
            {
                <MudBadge Color="Color.Warning" Dot="true" Origin="Origin.TopRight">@context.DesiredMemoryAllocated</MudBadge>
            }
            else
            {
                @context.DesiredMemoryAllocated   
            }
        </MudTd>
        <MudTd DataLabel="Delay">@context.Delay.ToString("g")</MudTd>
        <MudTd DataLabel="Memory">@context.MemoryAllocated</MudTd>
        <MudTd DataLabel="LastUpdated">@context.LastUpdated</MudTd>
        <MudTd DataLabel="State">
            <MudChip T="string" Variant="Variant.Filled" Color="@(context.State == ClientState.Active ? Color.Success : Color.Warning)">
                @context.State
            </MudChip>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No clients connected</MudText>
    </NoRecordsContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
    </PagerContent>
</MudTable>

@code {
    private HashSet<ClientInfo> _selectedItems = new ();
    private List<ClientInfo> _elements = new ();
    private int _selectedClientsCount;
    private uint _desiredMemory;
    private uint _desiredDelay;

    [Inject] public IClientsInventoryService ClientsInventoryService { get; set; }

    protected override void OnInitialized()
    {
        ClientsInventoryService.ClientAdded += AddClient;
        ClientsInventoryService.ClientRemoved += RemoveClient;
        ClientsInventoryService.ClientUpdated += UpdateClient;
        _elements.AddRange(ClientsInventoryService.GetClients());
    }

    private void UpdateClient(object? sender, ClientInfo e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void RemoveClient(object? sender, ClientInfo e)
    {
        _elements.Remove(_elements.First(element => element.Id == e.Id));
        InvokeAsync(StateHasChanged);
    }

    private void AddClient(object? sender, ClientInfo clientInfo)
    {
       _elements.Add(clientInfo);
       InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ClientsInventoryService.ClientAdded -= AddClient;
        ClientsInventoryService.ClientRemoved -= RemoveClient;
        ClientsInventoryService.ClientUpdated -= UpdateClient;
    }

    private void OnSelectedItemsChanged(HashSet<ClientInfo> selectedItems)
    {
        _selectedClientsCount = selectedItems.Count;
    }

    private void OnApplyButtonClicked()
    {
        foreach (var client in _selectedItems)
        {
            client.DesiredDelay = TimeSpan.FromMilliseconds(_desiredDelay);
            client.DesiredMemoryAllocated = _desiredMemory;
        }
    }

}